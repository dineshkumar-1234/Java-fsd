package phase;

class Node {
	int data;
	Node next;
	Node prev;
	
	public Node(int data) {
		this.data = data;
		this.next = null;
		this.prev = null;
		}
}

class DLL {
	private Node head;
	private Node tail;
	
	public void DLL() {
		this.head = null;
		this.tail = null;
		}
	
	public void insert(int data) {
		Node newNode = new Node(data);
		if (head == null) {
			head = newNode;
			tail = newNode;
			} 
		else {
			tail.next = newNode;
			newNode.prev = tail;
			tail = newNode;
			}
		}
	
	public void forwardTraversal() {
		Node current = head;
		System.out.println("Forward Traversal:");
		while (current != null) {
			System.out.print(current.data + " ");
			current = current.next;
			}
		System.out.println();
		}
	
	public void backwardTraversal() {
		Node current = tail;
		System.out.println("Backward Traversal:");
		while (current != null) {
			System.out.print(current.data + " ");
			current = current.prev;
			}
		System.out.println();
		}
}


public class DoublyLinkedList {
	public static void main(String[] args) {
		DLL list = new DLL();
		list.insert(1);
		list.insert(2);
		list.insert(3);
		list.insert(4);
		list.insert(5);
		
		list.forwardTraversal();
		list.backwardTraversal();
		}
}


